name: Project WorkFlow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  # Linting and Test code (Eslint and Jest)
  lint-and-test-app:
    name: Lint & Test App

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04]
        node: [16]

    steps:

      - name: Checkout Last Branch Commit üîç
        uses: actions/checkout@v3

      - name: Setup Node Env üî®
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies üíº 
        run: yarn install

      - name: Run eslint üëÄ
        run: yarn lint

      - name: Run Tests üßæ
        run: yarn test
   
  create-and-push-docker-image:

    # Create Docker image and push on DockerHub
    name: Create & Push docker image
    needs: [lint-and-test-app]

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04]
        node: [16]

    steps:

      - name: Checkout repository üîç
        uses: actions/checkout@v3

      - name: Setup Node Env üî®
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install yarn üíä
        run: npm install yarn -g    

      - name: 'Create env file' 
        run: |
          touch .env
          echo REACT_APP_BOT_TOKEN= ${{ secrets.REACT_APP_BOT_TOKEN }} >> .env
          echo REACT_APP_CHAT_ID= ${{ secrets.REACT_APP_CHAT_ID }} >> .env
          echo REACT_APP_BRANCH= ${{ secrets.REACT_APP_BRANCH }} >> .env
          echo REACT_APP_CLIENT_ID= ${{ secrets.REACT_APP_CLIENT_ID }} >> .env
          echo REACT_APP_TOKEN= ${{ secrets.REACT_APP_TOKEN }} >> .env
          cat .env

      - name: Set up QEMU üñ•
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx üíø
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub ‚öô
        env:
          DOCKER_USERNAME:  ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        
      - name: Build and push üíº
        uses: docker/build-push-action@v2
        with:
          # This path is totally independant from the 'file' directve below
          context: ./
          # This path is totally independant from the 'context' directive above
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/tinacms-sto-arm:latest

  build-and-deploy-app:

    # Build app with TinaCMS & Next.js and push to Netlify
    name: Build and deploy App to Netlify 
    needs: [create-and-push-docker-image]
    
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04]
        node: [16]
    
    env: 
          REACT_APP_BOT_TOKEN: ${{ secrets.REACT_APP_BOT_TOKEN }}
          REACT_APP_CHAT_ID: ${{ secrets.REACT_APP_CHAT_ID }}
          REACT_APP_BRANCH: ${{ secrets.REACT_APP_BRANCH }}
          REACT_APP_CLIENT_ID: ${{ secrets.REACT_APP_CLIENT_ID }}
          REACT_APP_TOKEN: ${{ secrets.REACT_APP_TOKEN }}
          
    steps:
          
      # Build App
      - name: Checkout Last Branch Commit üîç 
        uses: actions/checkout@v3

      - name: Setup Node Env üî®
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies üíº
        run: yarn install

      - name: Build project üîß
        run: yarn build
      
      # Deploy project to Netlify
      - name: Deploy to Netlify üöÄ
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "./"
          production-branch: main
          github-token: ${{ secrets.ACCESS_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
