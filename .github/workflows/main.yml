name: Project WorkFlow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  # Linting and Test code (Eslint and Jest)
  # lint-and-test-app:
  #   name: Lint & Test App

  #   runs-on: ${{ matrix.os }}

  #   strategy:
  #     matrix:
  #       os: [ubuntu-20.04]
  #       node: [16]

  #   steps:

  #     - name: Checkout Last Branch Commit üîç
  #       uses: actions/checkout@v3

  #     - name: Setup Node Env üî®
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node }}

  #     - name: Install dependencies üíº 
  #       run: yarn install

  #     - name: Run eslint üëÄ
  #       run: yarn lint

  #     - name: Run Tests üßæ
  #       run: yarn test
   
  # create-and-push-docker-image:

  #   # Create Docker image and push on DockerHub
  #   name: Create & Push docker image
  #   needs: [lint-and-test-app]

  #   runs-on: ${{ matrix.os }}

  #   strategy:
  #     matrix:
  #       os: [ubuntu-20.04]
  #       node: [16]

  #   steps:

  #     - name: Checkout repository üîç
  #       uses: actions/checkout@v3

  #     - name: Setup Node Env üî®
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node }}

  #     - name: Install yarn üíä
  #       run: npm install yarn -g    

  #     - name: 'Create env file' 
  #       run: |
  #         touch .env
  #         echo REACT_APP_BOT_TOKEN= ${{ secrets.REACT_APP_BOT_TOKEN }} >> .env
  #         echo REACT_APP_CHAT_ID= ${{ secrets.REACT_APP_CHAT_ID }} >> .env
  #         echo REACT_APP_BRANCH= ${{ secrets.REACT_APP_BRANCH }} >> .env
  #         echo REACT_APP_CLIENT_ID= ${{ secrets.REACT_APP_CLIENT_ID }} >> .env
  #         echo REACT_APP_TOKEN= ${{ secrets.REACT_APP_TOKEN }} >> .env
  #         cat .env

  #     - name: Set up QEMU üñ•
  #       uses: docker/setup-qemu-action@v1

  #     - name: Set up Docker Buildx üíø
  #       uses: docker/setup-buildx-action@v1

  #     - name: Login to Docker Hub ‚öô
  #       env:
  #         DOCKER_USERNAME:  ${{ secrets.DOCKERHUB_USERNAME }}
  #         DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  #       run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        
  #     - name: Build and push üíº
  #       uses: docker/build-push-action@v2
  #       with:
  #         # This path is totally independant from the 'file' directve below
  #         context: ./
  #         # This path is totally independant from the 'context' directive above
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/tinacms-sto-arm:latest

  build-and-deploy-app:

    # Build app with TinaCMS & Next.js and push to Netlify
    name: Build and deploy App to Netlify 
    # needs: [create-and-push-docker-image]
    
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04]
        node: [16]
    
    env: 
          REACT_APP_BOT_TOKEN: ${{ secrets.REACT_APP_BOT_TOKEN }}
          REACT_APP_CHAT_ID: ${{ secrets.REACT_APP_CHAT_ID }}
          REACT_APP_BRANCH: ${{ secrets.REACT_APP_BRANCH }}
          REACT_APP_CLIENT_ID: ${{ secrets.REACT_APP_CLIENT_ID }}
          REACT_APP_TOKEN: ${{ secrets.REACT_APP_TOKEN }}
          
    steps:
          
      # Build App
      - name: Checkout Last Branch Commit üîç 
        uses: actions/checkout@v3

      - name: Setup Node Env üî®
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}


       # Cache node modules and next folder
      - name: Caching üì¨
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
            ${{ github.workspace }}/dist/cache
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies üíº
        run: yarn install
             
      # Using `netlify build` to build the website.
      # It will run the command specified on `netlify.toml` (`npm run build`)
      # and use the necessary plugin
      - name: Build project üîß
        id: build-netlify
        run: |
          netlify build
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      # Deploys the website to Netlify extracting the deploy metadata.
      # Adapted from the Netlify Github Action.
      - name: Production deployment üöÄ
        id: deploy-netlify
        run: |
          COMMAND="netlify deploy --prod"
          OUTPUT=$(sh -c "$COMMAND")

          NETLIFY_LOGS_URL=$(echo "$OUTPUT" | grep -Eo '(http|https)://app.netlify.com/[a-zA-Z0-9./?=_-]*') # Unique key: app.netlify.com
          NETLIFY_LIVE_URL=$(echo "$OUTPUT" | grep -Eo '(http|https)://[a-zA-Z0-9./?=_-]*' | grep -Ev "netlify.com|(--)") # Unique key: doesn't contain -- and app.netlify.com

          echo "::set-output name=netlify_logs_url::$NETLIFY_LOGS_URL"
          echo "::set-output name=netlify_live_url::$NETLIFY_LIVE_URL"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
